service: items-api

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  categoryTableName: ${self:custom.stage}-itemCategories
  itemTableName: ${self:custom.stage}-items
  tagTableName: ${self:custom.stage}-itemTags
  itemToTagTableName: ${self:custom.stage}-itemsToTags
  colorTableName: ${self:custom.stage}-itemColors
  itemToColorTableName: ${self:custom.stage}-itemsToColors
  sizeTableName: ${self:custom.stage}-itemSizes
  itemToSizeTableName: ${self:custom.stage}-itemsToSizes
  photoTableName: ${self:custom.stage}-itemPhotos
  itemToPhotoTableName: ${self:custom.stage}-itemsToPhotos

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env
  environment:
    categoryTableName: ${self:custom.categoryTableName}
    itemTableName: ${self:custom.itemTableName}
    tagTableName: ${self:custom.tagTableName}
    itemToTagTableName: ${self:custom.itemToTagTableName}
    colorTableName: ${self:custom.colorTableName}
    itemToColorTableName: ${self:custom.itemToColorTableName}
    sizeTableName: ${self:custom.sizeTableName}
    itemToSizeTableName: ${self:custom.itemToSizeTableName}
    photoTableName: ${self:custom.photoTableName}
    itemToPhotoTableName: ${self:custom.itemToPhotoTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ CategoriesTable, Arn ]
        - "Fn::GetAtt": [ ItemsTable, Arn ]
        - "Fn::GetAtt": [ TagsTable, Arn ]
        - "Fn::GetAtt": [ ItemsToTagsTable, Arn ]
        - "Fn::GetAtt": [ ColorsTable, Arn ]
        - "Fn::GetAtt": [ ItemsToColorsTable, Arn ]
        - "Fn::GetAtt": [ SizesTable, Arn ]
        - "Fn::GetAtt": [ ItemsToSizesTable, Arn ]
        - "Fn::GetAtt": [ PhotosTable, Arn ]
        - "Fn::GetAtt": [ ItemsToPhotosTable, Arn ]

functions:
  createCategory:
    handler: categories/create.main
    events:
      - http:
          path: categories
          method: post
          cors: true
          authorizer: aws_iam

  getCategory:
    handler: categories/get.main
    events:
      - http:
          path: category/{userId}/{id}
          method: get
          cors: true

  listCategories:
    handler: categories/list.main
    events:
      - http:
          path: categories
          method: get
          cors: true
          authorizer: aws_iam

  listPublishedCategories:
    handler: categories/listPublished.main
    events:
      - http:
          path: publishedCategories/{userId}
          method: get
          cors: true

  updateCategory:
    handler: categories/update.main
    events:
      - http:
          path: categories/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteCategory:
    handler: categories/delete.main
    events:
      - http:
          path: categories/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  createItem:
    handler: items/create.main
    events:
      - http:
          path: items
          method: post
          cors: true
          authorizer: aws_iam

  getItem:
    handler: items/get.main
    events:
      - http:
          path: item/{userId}/{id}
          method: get
          cors: true

  listAllItems:
    handler: items/list.main
    events:
      - http:
          path: items
          method: get
          cors: true
          authorizer: aws_iam

  listItems:
    handler: items/list.main
    events:
      - http:
          path: items/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  listAllPublishedItems:
    handler: items/listPublished.main
    events:
      - http:
          path: publishedItems/{userId}
          method: get
          cors: true  

  listPublishedItems:
    handler: items/listPublished.main
    events:
      - http:
          path: publishedItems/{userId}/{id}
          method: get
          cors: true

  updateItem:
    handler: items/update.main
    events:
      - http:
          path: items/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteItem:
    handler: items/delete.main
    events:
      - http:
          path: items/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  listTags:
    handler: tags/list.main
    events:
      - http:
          path: tags/{userId}
          method: get
          cors: true

  listAllItemsToTags:
    handler: itemsToTags/list.main
    events:
      - http:
          path: itemsToTags/{userId}
          method: get
          cors: true

  listItemsToTags:
    handler: itemsToTags/list.main
    events:
      - http:
          path: itemsToTags/{userId}/{id}
          method: get
          cors: true

  listColors:
    handler: colors/list.main
    events:
      - http:
          path: colors/{userId}
          method: get
          cors: true

  listItemsToColors:
    handler: itemsToColors/list.main
    events:
      - http:
          path: itemsToColors/{userId}/{id}
          method: get
          cors: true

  listSizes:
    handler: sizes/list.main
    events:
      - http:
          path: sizes/{userId}
          method: get
          cors: true

  listItemsToSizes:
    handler: itemsToSizes/list.main
    events:
      - http:
          path: itemsToSizes/{userId}/{id}
          method: get
          cors: true

  listPhotos:
    handler: photos/list.main
    events:
      - http:
          path: photos/{userId}
          method: get
          cors: true

  listAllItemsToPhotos:
    handler: itemsToPhotos/list.main
    events:
      - http:
          path: itemsToPhotos/{userId}
          method: get
          cors: true

  listItemsToPhotos:
    handler: itemsToPhotos/list.main
    events:
      - http:
          path: itemsToPhotos/{userId}/{id}
          method: get
          cors: true

  updateAttributes:
    handler: updateAttributes.main
    events:
      - http:
          path: attributes
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
